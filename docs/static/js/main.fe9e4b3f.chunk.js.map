{"version":3,"sources":["components/CharacterDetail.js","components/FilterByName.js","components/Filters.js","components/CharacterCard.js","components/CharacterList.js","components/Home.js","services/getApiData.js","components/App.js","serviceWorker.js","index.js"],"names":["CharacterDetail","props","className","character","name","to","src","image","alt","species","origin","episode","lenght","status","FilterByName","onSubmit","ev","preventDefault","type","id","placeholder","onChange","handlerFilter","value","target","key","Filters","CharacterCard","title","CharacterList","characters","length","characterElements","map","Home","getApiData","fetch","then","response","json","data","results","App","useState","setCharacters","nameFilter","setNameFilter","useEffect","filteredCharacters","filter","toUpperCase","includes","exact","path","render","characterId","match","params","foundCharacter","find","parseInt","undefined","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fe9e4b3f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CharacterDetail = (props) => {\r\n  return (\r\n    <div className='modal'>\r\n      <div className='modal__dialog'>\r\n        <div className='modal__content'>\r\n          <header className='modal__header'>\r\n            <h2 className='modal__title'>{props.character.name}</h2>\r\n            <Link to='/'>\r\n              <span className='modal__close icon fas fa-times'></span>\r\n            </Link>\r\n          </header>\r\n          <section>\r\n            <img className=' card__img' src={props.character.image} alt={`${props.character.name} pic`}></img>\r\n            <ul className='ml-1 mt-1'>\r\n              <li>Species:{props.character.species}</li>\r\n              <li>Origin:{props.character.origin}</li>\r\n              <li>Episode:{props.character.episode.lenght}</li>\r\n              <li>Status:{props.character.status}</li>\r\n            </ul>\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCharacterDetail.propTypes = {\r\n  character: PropTypes.object,\r\n};\r\n\r\nexport default CharacterDetail;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FilterByName = (props) => {\r\n  const handlerChange = (ev) => {\r\n    props.handlerFilter({\r\n      value: ev.target.value,\r\n      key: 'name',\r\n    });\r\n  };\r\n\r\n  const handlerSubmit = (ev) => {\r\n    ev.preventDefault();\r\n  };\r\n  return (\r\n    <form onSubmit={handlerSubmit}>\r\n      <input className='form__input-text' type='text' name='name' id='name' placeholder='Search your character here...' onChange={handlerChange} value={props.value} />\r\n    </form>\r\n  );\r\n};\r\n\r\nFilterByName.propTypes = {\r\n  handlerFilter: PropTypes.func,\r\n  value: PropTypes.string,\r\n};\r\n\r\nexport default FilterByName;\r\n","import React from 'react';\r\nimport FilterByName from '../components/FilterByName';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filters = (props) => {\r\n  return (\r\n    <section>\r\n      <FilterByName handlerFilter={props.handlerFilter} value={props.value} />\r\n    </section>\r\n  );\r\n};\r\n\r\nFilters.propTypes = {\r\n  handlerFilter: PropTypes.func,\r\n  value: PropTypes.string,\r\n};\r\n\r\nexport default Filters;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CharacterCard = (props) => {\r\n  return (\r\n    <li className='card'>\r\n      <Link to={`/character/${props.character.id}`}>\r\n        <img className='card__img' src={props.character.image} alt={`${props.character.name} pic`} title={`${props.character.name} pic`} />\r\n        <h4 className='card__title'>{props.character.name}</h4>\r\n        <p className='card__description'>{props.character.species}</p>\r\n        <p className='card__description'>{props.character.origin}</p>\r\n        <p className='card__description'>{props.character.status}</p>\r\n      </Link>\r\n    </li>\r\n  );\r\n};\r\n\r\nCharacterCard.propTypes = {\r\n  character: PropTypes.object,\r\n};\r\n\r\nexport default CharacterCard;\r\n","import React from 'react';\r\nimport CharacterCard from '../components/CharacterCard';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CharacterList = (props) => {\r\n  if (props.characters.length > 0) {\r\n    const characterElements = props.characters.map((character) => {\r\n      return <CharacterCard key={character.id} character={character} />;\r\n    });\r\n    return (\r\n      <section>\r\n        <ul className='cards'>{characterElements}</ul>\r\n      </section>\r\n    );\r\n  } else {\r\n    return <p>\"No hay ning√∫n personaje que coincida con la palabra {props.value}\".</p>;\r\n  }\r\n};\r\n\r\nCharacterList.propTypes = {\r\n  character: PropTypes.array,\r\n};\r\n\r\nexport default CharacterList;\r\n","import React from 'react';\r\nimport Filters from '../components/Filters';\r\nimport CharacterList from '../components/CharacterList';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Home = (props) => {\r\n  return (\r\n    <div>\r\n      <Filters handlerFilter={props.handlerFilter} value={props.value} />\r\n      <CharacterList characters={props.characters} value={props.value} />\r\n    </div>\r\n  );\r\n};\r\n\r\nHome.propTypes = {\r\n  handlerFilter: PropTypes.func,\r\n  value: PropTypes.string,\r\n  characters: PropTypes.array,\r\n};\r\n\r\nexport default Home;\r\n","const getApiData = () => {\r\n  return fetch('https://rickandmortyapi.com/api/character/?results=20')\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      return data.results.map((character) => {\r\n        return {\r\n          id: character.id,\r\n          image: character.image,\r\n          name: character.name,\r\n          species: character.species,\r\n          origin: character.origin.name,\r\n          episode: character.episode,\r\n          status: character.status,\r\n        };\r\n      });\r\n    });\r\n};\r\n\r\nexport default getApiData;\r\n","import React, { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport CharacterDetail from './CharacterDetail';\nimport Home from '../components/Home';\nimport getApiData from '../services/getApiData';\n\nconst App = () => {\n  const [characters, setCharacters] = useState([]);\n  const [nameFilter, setNameFilter] = useState('');\n  useEffect(() => {\n    getApiData().then((data) => {\n      setCharacters(data);\n    });\n  }, []);\n\n  //event handler\n\n  const handlerFilter = (data) => {\n    setNameFilter(data.value);\n  };\n\n  //render\n\n  const filteredCharacters = characters.filter((character) => {\n    return character.name.toUpperCase().includes(nameFilter.toUpperCase());\n  });\n\n  const renderCharacterDetail = (props) => {\n    const characterId = props.match.params.characterId;\n\n    const foundCharacter = characters.find((character) => {\n      return character.id === parseInt(characterId);\n    });\n    if (foundCharacter !== undefined) {\n      return <CharacterDetail character={foundCharacter} />;\n    }\n  };\n\n  return (\n    <>\n      <h1 className='title--big'>Rick and Morty</h1>\n      <div className='.display-block'>\n        <Switch>\n          <Route exact path='/'>\n            <Home handlerFilter={handlerFilter} characters={filteredCharacters} value={nameFilter} />\n          </Route>\n          <Route path='/character/:characterId' render={renderCharacterDetail} />\n        </Switch>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport '../src/stylesheets/index.css';\nimport App from '../src/components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}